PROJECT (trax)

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)
GET_FILENAME_COMPONENT(PROJECT_ROOT . ABSOLUTE)
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

IF (NOT BUILD_VERSION)
    FIND_PACKAGE(Git)
    # Try to find the Git commit and use it as version identifier
    IF(GIT_FOUND)
       EXECUTE_PROCESS(
       COMMAND ${GIT_EXECUTABLE} rev-parse HEAD
       WORKING_DIRECTORY ${PROJECT_ROOT}
       OUTPUT_VARIABLE BUILD_VERSION
       OUTPUT_STRIP_TRAILING_WHITESPACE)
    ELSE()
        SET(BUILD_VERSION "unknown")
    ENDIF()
ENDIF()

IF (WIN32 OR WIN64)
    SET(LIBRARIES ws2_32)
ELSE ()
    SET(LIBRARIES m)
    IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
    ENDIF ()
    # Only build test executable on Unix systems / used only for development
ENDIF ()

if(MSVC)
  add_definitions(/MP) # Build with multiple processes
  add_definitions(/wd4244 /wd4267 /wd4018 /wd4355 /wd4800 /wd4251 /wd4996 /wd4146 /wd4305) # Ignore some of the warnings
endif()

LINK_LIBRARIES(${LIBRARIES})
ADD_DEFINITIONS(-DTRAX_BUILD_VERSION="${BUILD_VERSION}")
SET(TRAX_SOURCE lib/trax.c lib/region.c lib/strmap.c lib/message.c lib/base64.c lib/trax.cpp)
ADD_LIBRARY(trax SHARED ${TRAX_SOURCE})
ADD_LIBRARY(traxstatic STATIC ${TRAX_SOURCE})

TARGET_COMPILE_OPTIONS(traxstatic PUBLIC -DTRAX_STATIC_DEFINE)

IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    SET (BUILD_DEBUG FALSE CACHE BOOL "Build in debug mode (with tests)")
    IF (BUILD_DEBUG)
        SET_TARGET_PROPERTIES(trax PROPERTIES COMPILE_FLAGS "-finstrument-functions")
        SET_TARGET_PROPERTIES(traxstatic PROPERTIES COMPILE_FLAGS "-finstrument-functions")
        ADD_SUBDIRECTORY(lib/tests)  
    ENDIF ()
ENDIF ()

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/lib)
SET_TARGET_PROPERTIES(traxstatic PROPERTIES POSITION_INDEPENDENT_CODE 1)

FIND_PACKAGE(OpenCV QUIET)
IF( OpenCV_FOUND ) 
  SET (BUILD_OPENCV TRUE CACHE BOOL "Build with OpenCV support (examples, library)")
ELSE ()
  SET (BUILD_OPENCV FALSE CACHE BOOL "Build with OpenCV support (examples, library)")
ENDIF (OpenCV_FOUND)

IF (BUILD_OPENCV)
  ADD_SUBDIRECTORY(support/opencv)
  INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/support/opencv/include)
ENDIF (BUILD_OPENCV)

SET (BUILD_CLIENT FALSE CACHE BOOL "Build with client support library and executable")
IF (BUILD_CLIENT)
ADD_SUBDIRECTORY(support/client)
ENDIF (BUILD_CLIENT)

IF (WIN32 OR WIN64)
	INSTALL(TARGETS trax RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
	INSTALL(TARGETS traxstatic LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
ELSE ()
	INSTALL(TARGETS trax traxstatic LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
ENDIF()
INSTALL(FILES lib/trax.h DESTINATION include)

ADD_SUBDIRECTORY(trackers)
