PROJECT (trax)

CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
GET_FILENAME_COMPONENT(PROJECT_ROOT . ABSOLUTE)
SET (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
INCLUDE(GNUInstallDirs)

IF (NOT BUILD_DATE)
	STRING(TIMESTAMP BUILD_DATE "%Y-%m-%d")
ENDIF()

IF (NOT BUILD_VERSION)
    FIND_PACKAGE(Git)
    # Try to find the Git commit and use it as version identifier
    IF(GIT_FOUND)
       EXECUTE_PROCESS(
       COMMAND ${GIT_EXECUTABLE} rev-parse HEAD
       WORKING_DIRECTORY ${PROJECT_ROOT}
       OUTPUT_VARIABLE BUILD_VERSION
       OUTPUT_STRIP_TRAILING_WHITESPACE)
    ELSE()
        SET(BUILD_VERSION "unknown")
    ENDIF()
ENDIF()

IF (WIN32 OR WIN64)
    SET(LIBRARIES ws2_32)
ELSE ()
    SET(LIBRARIES m)
    IF (CMAKE_COMPILER_IS_GNUCXX)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
    ENDIF ()
    # Only build test executable on Unix systems / used only for development
ENDIF ()

IF(MSVC)
  ADD_DEFINITIONS(/MP) # Build with multiple processes
  ADD_DEFINITIONS(/wd4244 /wd4267 /wd4018 /wd4355 /wd4800 /wd4251 /wd4996 /wd4146 /wd4305) # Ignore some of the warnings
ENDIF()

LINK_LIBRARIES(${LIBRARIES})
ADD_DEFINITIONS(-DTRAX_BUILD_VERSION="${BUILD_VERSION}" -DTRAX_BUILD_DATE="${BUILD_DATE}")
SET(TRAX_SOURCE lib/trax.c lib/region.c lib/strmap.c lib/message.c lib/base64.c lib/trax.cpp)
ADD_LIBRARY(trax SHARED ${TRAX_SOURCE})
ADD_LIBRARY(traxstatic STATIC ${TRAX_SOURCE})

SET_TARGET_PROPERTIES(trax PROPERTIES VERSION 0.0.0 SOVERSION 0)
TARGET_COMPILE_OPTIONS(traxstatic PUBLIC -DTRAX_STATIC_DEFINE)

IF (CMAKE_COMPILER_IS_GNUCXX)
    SET (BUILD_DEBUG FALSE CACHE BOOL "Build in debug mode (with tests)")
    IF (BUILD_DEBUG)
        SET_TARGET_PROPERTIES(trax PROPERTIES COMPILE_FLAGS "-finstrument-functions")
        SET_TARGET_PROPERTIES(traxstatic PROPERTIES COMPILE_FLAGS "-finstrument-functions")
        ADD_SUBDIRECTORY(lib/tests)
    ENDIF ()
ENDIF ()

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/lib)
SET_TARGET_PROPERTIES(traxstatic PROPERTIES POSITION_INDEPENDENT_CODE 1)

SET (BUILD_EXAMPLES FALSE CACHE BOOL "Build example programs")
SET (BUILD_OPENCV FALSE CACHE BOOL "Build with OpenCV support")
SET (BUILD_CLIENT FALSE CACHE BOOL "Build with client support library and executable")
SET (BUILD_MATLAB FALSE CACHE BOOL "Build Matlab/Octave bindings")

IF (BUILD_OPENCV)
  FIND_PACKAGE(OpenCV REQUIRED)
  ADD_SUBDIRECTORY(support/opencv)
  INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/support/opencv/include)
ENDIF (BUILD_OPENCV)

IF (BUILD_CLIENT)
ADD_SUBDIRECTORY(support/client)
ENDIF (BUILD_CLIENT)

IF (BUILD_MATLAB)
ADD_SUBDIRECTORY(support/matlab)
ENDIF (BUILD_MATLAB)

IF (WIN32 OR WIN64)
	INSTALL(TARGETS trax EXPORT core RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
	INSTALL(TARGETS traxstatic EXPORT core LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
ELSE ()
	INSTALL(TARGETS trax traxstatic EXPORT core LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
ENDIF()

INSTALL(FILES lib/trax.h DESTINATION include)
INSTALL(EXPORT core DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/trax FILE trax-component-core.cmake)

IF (BUILD_EXAMPLES)
	ADD_SUBDIRECTORY(trackers)
ENDIF (BUILD_EXAMPLES)

FIND_PROGRAM(PYTHON "python")

IF (PYTHON)
    SET(SETUP_PY_IN "${CMAKE_CURRENT_SOURCE_DIR}/python/setup.py.in")
    SET(SETUP_PY "${CMAKE_CURRENT_BINARY_DIR}/python/setup.py")
    SET(DEPS "${CMAKE_CURRENT_SOURCE_DIR}/python/trax/__init__.py")
    SET(OUTPUT "${CMAKE_BINARY_DIR}/distutils_timestamp")
	SET(BUILD_PYTHON_DIR "${CMAKE_CURRENT_BINARY_DIR}/python")

    CONFIGURE_FILE(${SETUP_PY_IN} ${SETUP_PY})

    ADD_CUSTOM_COMMAND(OUTPUT ${OUTPUT}
                       COMMAND ${PYTHON} ${SETUP_PY} build ${DISTUTILS_BUILD_FLAGS}
                       COMMAND ${CMAKE_COMMAND} -E touch ${OUTPUT}
                       WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/python/
                       DEPENDS ${DEPS} ${SETUP_PY} COMMENT "Running Distutils")

    ADD_CUSTOM_TARGET(traxpython ALL DEPENDS ${OUTPUT})

    INSTALL(CODE "EXECUTE_PROCESS(COMMAND ${PYTHON} ${SETUP_PY} install ${DISTUTILS_INSTALL_FLAGS} WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/python/)" )
ENDIF (PYTHON)

# CMake config file
INCLUDE(CMakePackageConfigHelpers)

SET(LIB_INSTALL_DIR ${CMAKE_INSTALL_LIBDIR})
SET(INCLUDE_INSTALL_DIR "${CMAKE_INSTALL_INCLUDEDIR}")

CONFIGURE_PACKAGE_CONFIG_FILE(trax-config.cmake.in
    ${PROJECT_BINARY_DIR}/trax-config.cmake
    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/trax
    PATH_VARS LIB_INSTALL_DIR INCLUDE_INSTALL_DIR)

WRITE_BASIC_PACKAGE_VERSION_FILE(
    ${PROJECT_BINARY_DIR}/trax-config-version.cmake
    VERSION ${BUILD_VERSION}
    COMPATIBILITY SameMajorVersion)

INSTALL(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/trax-config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/trax-config-version.cmake
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/trax)



